{"version":3,"sources":["actions.js","api/api.js","constants.js","containers/App.js","components/ErrorBoundry.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","imageCapture","Component","console","log","navigator","mediaDevices","getSupportedConstraints","getUserMedia","video","mediaStream","document","querySelector","srcObject","onloadedmetadata","e","play","mediaStreamTrack","getVideoTracks","ImageCapture","err","takePhoto","img","blob","src","URL","createObjectURL","onload","revokeObjectURL","App","this","props","onRequestRobots","robots","searchField","supportedConstraints","onSearchChange","isPending","filter","robot","name","toLowerCase","includes","className","width","height","onClick","id","Object","keys","map","constraint","connect","state","searchRobots","event","target","value","initialStateSearch","initialStateRobots","rootReducers","createLogger","combineReducers","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById","window","addEventListener","serviceWorker","register","process","registration","pushManager","subscribe","userVisibleOnly","registrationError"],"mappings":"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","file":"static/js/main.72ff37a0.chunk.js","sourcesContent":["import { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport './App.css';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nlet imageCapture = null;\n\nconsole.log('media supported constraints', navigator.mediaDevices.getSupportedConstraints());\n\nnavigator.mediaDevices.getUserMedia({video: true})\n  .then(function(mediaStream) {\n    /* use the stream */\n    console.log('mediaStream', mediaStream);\n    var video = document.querySelector('video');\n    video.srcObject = mediaStream;\n    video.onloadedmetadata = function(e) {\n      console.log('video play');\n      video.play();\n    };\n    \n    const mediaStreamTrack = mediaStream.getVideoTracks()[0];\n    imageCapture = new ImageCapture(mediaStreamTrack);\n    console.log(imageCapture);\n  })\n  .catch(function(err) {\n    /* handle the error */\n    console.log('error', err);\n  });\n\nconst takePhoto = () => {\n  const img = document.querySelector('img');\n\n  imageCapture.takePhoto()\n      .then(blob => {\n        img.src = URL.createObjectURL(blob);\n        img.onload = () => { URL.revokeObjectURL(img.src); }\n      })\n      .catch(error => console.error('takePhoto() error:', error));\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    const supportedConstraints = navigator.mediaDevices.getSupportedConstraints();\n    console.log('supportedConstraints', supportedConstraints);\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <video width=\"320\" height=\"240\"></video>\n        <button onClick={takePhoto}>Take Photo</button>\n        <img width=\"320\" height=\"240\" />\n        <div id=\"constraintList\">\n        {\n          Object.keys(supportedConstraints).map((constraint) => {\n            return (<code>{constraint}<br></br></code>);\n          })\n        }\n        </div>\n        {/* <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          }\n        </Scroll> */}\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport App from './containers/App';\n// import * as serviceWorker from './serviceWorker';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport './index.css';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware /*, logger */))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register(`${process.env.PUBLIC_URL}/sw.js`).then(registration => {\n      console.log('SW registered: ', registration);\n      registration.pushManager.subscribe({userVisibleOnly: true});\n    }).catch(registrationError => {\n      console.log('SW registration failed: ', registrationError);\n    });\n  });\n}"],"sourceRoot":""}